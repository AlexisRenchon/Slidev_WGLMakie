{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: ISC\n */\n\n// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nimport MarkdownIt from 'markdown-it/lib'\nimport StateCore from 'markdown-it/lib/rules_core/state_core.js'\nimport Token from 'markdown-it/lib/token.js'\n\ninterface TaskListsOptions {\n  enabled: boolean\n  label: boolean\n  lineNumber: boolean\n}\n\nconst checkboxRegex = /^ *\\[([\\sx])] /i\n\nexport default function markdownItTaskLists(\n  md: MarkdownIt,\n  options: TaskListsOptions = { enabled: false, label: false, lineNumber: false }\n): void {\n  md.core.ruler.after('inline', 'task-lists', (state) => processToken(state, options))\n  md.renderer.rules.taskListItemCheckbox = (tokens) => {\n    const token = tokens[0]\n    const checkedAttribute = token.attrGet('checked') ? 'checked=\"\" ' : ''\n    const disabledAttribute = token.attrGet('disabled') ? 'disabled=\"\" ' : ''\n    const line = token.attrGet('line')\n    const idAttribute = `id=\"${token.attrGet('id')}\" `\n    const dataLineAttribute = line && options.lineNumber ? `data-line=\"${line}\" ` : ''\n\n    return `<input class=\"task-list-item-checkbox\" type=\"checkbox\" ${checkedAttribute}${disabledAttribute}${dataLineAttribute}${idAttribute}/>`\n  }\n\n  md.renderer.rules.taskListItemLabel_close = () => {\n    return '</label>'\n  }\n\n  md.renderer.rules.taskListItemLabel_open = (tokens: Token[]) => {\n    const token = tokens[0]\n    const id = token.attrGet('id')\n    return `<label for=\"${id}\">`\n  }\n}\n\nfunction processToken(state: StateCore, options: TaskListsOptions): boolean {\n  const allTokens = state.tokens\n  for (let i = 2; i < allTokens.length; i++) {\n    if (!isTodoItem(allTokens, i)) {\n      continue\n    }\n\n    todoify(allTokens[i], options)\n    allTokens[i - 2].attrJoin('class', `task-list-item ${options.enabled ? ' enabled' : ''}`)\n\n    const parentToken = findParentToken(allTokens, i - 2)\n    if (parentToken) {\n      parentToken.attrJoin('class', 'contains-task-list')\n    }\n  }\n  return false\n}\n\nfunction findParentToken(tokens: Token[], index: number): Token | undefined {\n  const targetLevel = tokens[index].level - 1\n  for (let currentTokenIndex = index - 1; currentTokenIndex >= 0; currentTokenIndex--) {\n    if (tokens[currentTokenIndex].level === targetLevel) {\n      return tokens[currentTokenIndex]\n    }\n  }\n  return undefined\n}\n\nfunction isTodoItem(tokens: Token[], index: number): boolean {\n  return (\n    isInline(tokens[index]) &&\n    isParagraph(tokens[index - 1]) &&\n    isListItem(tokens[index - 2]) &&\n    startsWithTodoMarkdown(tokens[index])\n  )\n}\n\nfunction todoify(token: Token, options: TaskListsOptions): void {\n  if (token.children == null) {\n    return\n  }\n\n  const id = generateIdForToken(token)\n\n  token.children.splice(0, 0, createCheckboxToken(token, options.enabled, id))\n  token.children[1].content = token.children[1].content.replace(checkboxRegex, '')\n\n  if (options.label) {\n    token.children.splice(1, 0, createLabelBeginToken(id))\n    token.children.push(createLabelEndToken())\n  }\n}\n\nfunction generateIdForToken(token: Token): string {\n  if (token.map) {\n    return `task-item-${token.map[0]}`\n  } else {\n    return `task-item-${Math.ceil(Math.random() * (10000 * 1000) - 1000)}`\n  }\n}\n\nfunction createCheckboxToken(token: Token, enabled: boolean, id: string): Token {\n  const checkbox = new Token('taskListItemCheckbox', '', 0)\n  if (!enabled) {\n    checkbox.attrSet('disabled', 'true')\n  }\n  if (token.map) {\n    checkbox.attrSet('line', token.map[0].toString())\n  }\n\n  checkbox.attrSet('id', id)\n\n  const checkboxRegexResult = checkboxRegex.exec(token.content)\n  const isChecked = checkboxRegexResult?.[1].toLowerCase() === 'x'\n  if (isChecked) {\n    checkbox.attrSet('checked', 'true')\n  }\n\n  return checkbox\n}\n\nfunction createLabelBeginToken(id: string): Token {\n  const labelBeginToken = new Token('taskListItemLabel_open', '', 1)\n  labelBeginToken.attrSet('id', id)\n  return labelBeginToken\n}\n\nfunction createLabelEndToken(): Token {\n  return new Token('taskListItemLabel_close', '', -1)\n}\n\nfunction isInline(token: Token): boolean {\n  return token.type === 'inline'\n}\n\nfunction isParagraph(token: Token): boolean {\n  return token.type === 'paragraph_open'\n}\n\nfunction isListItem(token: Token): boolean {\n  return token.type === 'list_item_open'\n}\n\nfunction startsWithTodoMarkdown(token: Token): boolean {\n  return checkboxRegex.test(token.content)\n}\n"],"names":["checkboxRegex","tokens","index","targetLevel","level","currentTokenIndex","token","options","children","map","Math","ceil","random","generateIdForToken","splice","enabled","id","checkbox","Token","attrSet","toString","exec","content","checkboxRegexResult","toLowerCase","createCheckboxToken","replace","label","labelBeginToken","createLabelBeginToken","push","md","lineNumber","core","ruler","after","state","processToken","allTokens","i","length","type","test","todoify","attrJoin","parentToken","findParentToken","renderer","rules","taskListItemCheckbox","checkedAttribute","attrGet","line","disabledAttribute","idAttribute","taskListItemLabel_close","taskListItemLabel_open"],"mappings":"8YAqBmBA,EAAG,kBA+CtB,WAAyBC,EAAiBC,GAExC,IADA,IAAMC,EAAcF,EAAOC,GAAOE,MAAQ,IACbF,EAAQ,EAAGG,GAAqB,EAAGA,IAC9D,GAAIJ,EAAOI,GAAmBD,QAAUD,EACtC,OAAOF,EAAOI,EAIpB,CAWA,WAAiBC,EAAcC,GAC7B,GAAsB,MAAlBD,EAAME,SAAV,CAIA,MAWF,SAA4BF,GAC1B,OAAIA,EAAMG,iBACYH,EAAMG,IAAI,GAEVC,aAAAA,KAAKC,KAAsB,IAAjBD,KAAKE,SAA4B,IAEnE,CAjBaC,CAAmBP,GAE9BA,EAAME,SAASM,OAAO,EAAG,EAiB3B,SAA6BR,EAAcS,EAAkBC,GAC3D,IAAcC,EAAG,IAASC,UAAC,uBAAwB,GAAI,GAClDH,GACHE,EAASE,QAAQ,WAAY,QAE3Bb,EAAMG,KACRQ,EAASE,QAAQ,OAAQb,EAAMG,IAAI,GAAGW,YAGxCH,EAASE,QAAQ,KAAMH,GAEvB,MAA4BhB,EAAcqB,KAAKf,EAAMgB,SAMrD,MAL6D,OAA3CC,MAAAA,OAAAA,EAAAA,EAAsB,GAAGC,gBAEzCP,EAASE,QAAQ,UAAW,QAGvBF,CACT,CAnC8BQ,CAAoBnB,EAAOC,EAAQQ,QAASC,IACxEV,EAAME,SAAS,GAAGc,QAAUhB,EAAME,SAAS,GAAGc,QAAQI,QAAQ1B,EAAe,IAEzEO,EAAQoB,QACVrB,EAAME,SAASM,OAAO,EAAG,EAiC7B,SAA+BE,GAC7B,IAAMY,EAAkB,IAAIV,EAAAA,QAAM,yBAA0B,GAAI,GAEhE,OADAU,EAAgBT,QAAQ,KAAMH,IAEhC,CArCgCa,CAAsBb,IAClDV,EAAME,SAASsB,KAuCNZ,IAAAA,EAAK,QAAC,0BAA2B,IAAK,IAhDhD,CAWH,iBA7EEa,EACAxB,YAAAA,IAAAA,EAA4B,CAAEQ,SAAS,EAAOY,OAAO,EAAOK,YAAY,IAExED,EAAGE,KAAKC,MAAMC,MAAM,SAAU,aAAc,SAACC,GAAUC,OAuBzD,SAAsBD,EAAkB7B,GAEtC,IADA,IAAM+B,EAAYF,EAAMnC,OACdsC,EAAG,EAAGA,EAAID,EAAUE,OAAQD,IACpC,GAyFoB,YAhEJtC,EAzBAqC,GAyBiBpC,EAzBNqC,GAyFhBE,MAIS,mBAjERxC,EAAOC,EAAQ,GAiEhBuC,MAIS,mBApETxC,EAAOC,EAAQ,GAoEfuC,MAIOzC,EAAC0C,KAvEIzC,EAAOC,GAuEAoB,SArG9B,CAIAqB,EAAQL,EAAUC,GAAIhC,GACtB+B,EAAUC,EAAI,GAAGK,SAAS,QAAO,mBAAoBrC,EAAQQ,QAAU,WAAa,KAEpF,IAAiB8B,EAAGC,EAAgBR,EAAWC,EAAI,GAC/CM,GACFA,EAAYD,SAAS,QAAS,qBAP/B,CAkGL,IA3EoB3C,EAAiBC,EAbnC,QACF,CAvCyDmC,CAAaD,EAAO7B,EAAQ,GACnFwB,EAAGgB,SAASC,MAAMC,qBAAuB,SAAChD,GACxC,IAAMK,EAAQL,EAAO,GACCiD,EAAG5C,EAAM6C,QAAQ,WAAa,cAAgB,KAC1C7C,EAAM6C,QAAQ,YAAc,eAAiB,GACjEC,EAAO9C,EAAM6C,QAAQ,UACA7C,OAAAA,EAAM6C,QAAQ,MAAK,KAG9C,MAAA,0DAAiED,EAAmBG,GAF1DD,GAAQ7C,EAAQyB,yBAA2BoB,EAAI,KAAO,IAE4CE,EAC9H,IAAA,EAEAvB,EAAGgB,SAASC,MAAMO,wBAA0B,WAC1C,MAAO,UACT,EAEAxB,EAAGgB,SAASC,MAAMQ,uBAAyB,SAACvD,GAG1C,qBAFcA,EAAO,GACJkD,QAAQ,MACD,IAC1B,CACF"}