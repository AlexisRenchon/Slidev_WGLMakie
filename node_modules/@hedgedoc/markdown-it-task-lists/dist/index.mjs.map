{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: ISC\n */\n\n// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nimport MarkdownIt from 'markdown-it/lib'\nimport StateCore from 'markdown-it/lib/rules_core/state_core.js'\nimport Token from 'markdown-it/lib/token.js'\n\ninterface TaskListsOptions {\n  enabled: boolean\n  label: boolean\n  lineNumber: boolean\n}\n\nconst checkboxRegex = /^ *\\[([\\sx])] /i\n\nexport default function markdownItTaskLists(\n  md: MarkdownIt,\n  options: TaskListsOptions = { enabled: false, label: false, lineNumber: false }\n): void {\n  md.core.ruler.after('inline', 'task-lists', (state) => processToken(state, options))\n  md.renderer.rules.taskListItemCheckbox = (tokens) => {\n    const token = tokens[0]\n    const checkedAttribute = token.attrGet('checked') ? 'checked=\"\" ' : ''\n    const disabledAttribute = token.attrGet('disabled') ? 'disabled=\"\" ' : ''\n    const line = token.attrGet('line')\n    const idAttribute = `id=\"${token.attrGet('id')}\" `\n    const dataLineAttribute = line && options.lineNumber ? `data-line=\"${line}\" ` : ''\n\n    return `<input class=\"task-list-item-checkbox\" type=\"checkbox\" ${checkedAttribute}${disabledAttribute}${dataLineAttribute}${idAttribute}/>`\n  }\n\n  md.renderer.rules.taskListItemLabel_close = () => {\n    return '</label>'\n  }\n\n  md.renderer.rules.taskListItemLabel_open = (tokens: Token[]) => {\n    const token = tokens[0]\n    const id = token.attrGet('id')\n    return `<label for=\"${id}\">`\n  }\n}\n\nfunction processToken(state: StateCore, options: TaskListsOptions): boolean {\n  const allTokens = state.tokens\n  for (let i = 2; i < allTokens.length; i++) {\n    if (!isTodoItem(allTokens, i)) {\n      continue\n    }\n\n    todoify(allTokens[i], options)\n    allTokens[i - 2].attrJoin('class', `task-list-item ${options.enabled ? ' enabled' : ''}`)\n\n    const parentToken = findParentToken(allTokens, i - 2)\n    if (parentToken) {\n      parentToken.attrJoin('class', 'contains-task-list')\n    }\n  }\n  return false\n}\n\nfunction findParentToken(tokens: Token[], index: number): Token | undefined {\n  const targetLevel = tokens[index].level - 1\n  for (let currentTokenIndex = index - 1; currentTokenIndex >= 0; currentTokenIndex--) {\n    if (tokens[currentTokenIndex].level === targetLevel) {\n      return tokens[currentTokenIndex]\n    }\n  }\n  return undefined\n}\n\nfunction isTodoItem(tokens: Token[], index: number): boolean {\n  return (\n    isInline(tokens[index]) &&\n    isParagraph(tokens[index - 1]) &&\n    isListItem(tokens[index - 2]) &&\n    startsWithTodoMarkdown(tokens[index])\n  )\n}\n\nfunction todoify(token: Token, options: TaskListsOptions): void {\n  if (token.children == null) {\n    return\n  }\n\n  const id = generateIdForToken(token)\n\n  token.children.splice(0, 0, createCheckboxToken(token, options.enabled, id))\n  token.children[1].content = token.children[1].content.replace(checkboxRegex, '')\n\n  if (options.label) {\n    token.children.splice(1, 0, createLabelBeginToken(id))\n    token.children.push(createLabelEndToken())\n  }\n}\n\nfunction generateIdForToken(token: Token): string {\n  if (token.map) {\n    return `task-item-${token.map[0]}`\n  } else {\n    return `task-item-${Math.ceil(Math.random() * (10000 * 1000) - 1000)}`\n  }\n}\n\nfunction createCheckboxToken(token: Token, enabled: boolean, id: string): Token {\n  const checkbox = new Token('taskListItemCheckbox', '', 0)\n  if (!enabled) {\n    checkbox.attrSet('disabled', 'true')\n  }\n  if (token.map) {\n    checkbox.attrSet('line', token.map[0].toString())\n  }\n\n  checkbox.attrSet('id', id)\n\n  const checkboxRegexResult = checkboxRegex.exec(token.content)\n  const isChecked = checkboxRegexResult?.[1].toLowerCase() === 'x'\n  if (isChecked) {\n    checkbox.attrSet('checked', 'true')\n  }\n\n  return checkbox\n}\n\nfunction createLabelBeginToken(id: string): Token {\n  const labelBeginToken = new Token('taskListItemLabel_open', '', 1)\n  labelBeginToken.attrSet('id', id)\n  return labelBeginToken\n}\n\nfunction createLabelEndToken(): Token {\n  return new Token('taskListItemLabel_close', '', -1)\n}\n\nfunction isInline(token: Token): boolean {\n  return token.type === 'inline'\n}\n\nfunction isParagraph(token: Token): boolean {\n  return token.type === 'paragraph_open'\n}\n\nfunction isListItem(token: Token): boolean {\n  return token.type === 'list_item_open'\n}\n\nfunction startsWithTodoMarkdown(token: Token): boolean {\n  return checkboxRegex.test(token.content)\n}\n"],"names":["checkboxRegex","markdownItTaskLists","md","options","enabled","label","lineNumber","core","ruler","after","state","allTokens","tokens","i","length","index","type","test","content","todoify","attrJoin","findParentToken","parentToken","processToken","renderer","rules","taskListItemCheckbox","token","checkedAttribute","attrGet","line","disabledAttribute","idAttribute","taskListItemLabel_close","taskListItemLabel_open","targetLevel","level","currentTokenIndex","children","id","map","Math","ceil","random","generateIdForToken","splice","checkbox","attrSet","toString","checkboxRegexResult","exec","toLowerCase","createCheckboxToken","replace","labelBeginToken","Token","createLabelBeginToken","push"],"mappings":"wCAqBA,MAAmBA,EAAG,2BAEqBC,EACzCC,EACAC,EAA4B,CAAEC,SAAS,EAAOC,OAAO,EAAOC,YAAY,IAExEJ,EAAGK,KAAKC,MAAMC,MAAM,SAAU,aAAeC,GAuB/C,SAAsBA,EAAkBP,GACtC,MAAMQ,EAAYD,EAAME,OACxB,IAAK,IAAKC,EAAG,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CACzC,GAyFoB,YAhEJD,EAzBAD,GAyBiBI,EAzBNF,GAyFhBG,MAIS,mBAjERJ,EAAOG,EAAQ,GAiEhBC,MAIS,mBApETJ,EAAOG,EAAQ,GAoEfC,OAIOhB,EAACiB,KAvEIL,EAAOG,GAuEAG,SApG5B,SAGFC,EAAQR,EAAUE,GAAIV,GACtBQ,EAAUE,EAAI,GAAGO,SAAS,QAA2B,mBAAAjB,EAAQC,QAAU,WAAa,KAEpF,QAAoBiB,EAAgBV,EAAWE,EAAI,GAC/CS,GACFA,EAAYF,SAAS,QAAS,qBAEjC,CAyFH,IA3EoBR,EAAiBG,EAbnC,OAAO,CACT,CAvCyDQ,CAAab,EAAOP,IAC3ED,EAAGsB,SAASC,MAAMC,qBAAwBd,IACxC,MAAMe,EAAQf,EAAO,GACCgB,EAAGD,EAAME,QAAQ,WAAa,cAAgB,KAC1CF,EAAME,QAAQ,YAAc,eAAiB,GACjEC,EAAOH,EAAME,QAAQ,UACP,OAAOF,EAAME,QAAQ,UAGzC,MAAO,0DAA0DD,IAAmBG,IAF1DD,GAAQ3B,EAAQG,yBAA2BwB,MAAW,KAE4CE,KAAW,EAGzI9B,EAAGsB,SAASC,MAAMQ,wBAA0B,IACnC,WAGT/B,EAAGsB,SAASC,MAAMS,uBAA0BtB,GAGnC,eAFOA,EAAO,GACJiB,QAAQ,SAG7B,CAoBA,SAASR,EAAgBT,EAAiBG,GACxC,MAAiBoB,EAAGvB,EAAOG,GAAOqB,MAAQ,EAC1C,IAAK,IAAIC,EAAoBtB,EAAQ,EAAGsB,GAAqB,EAAGA,IAC9D,GAAIzB,EAAOyB,GAAmBD,QAAUD,EACtC,OAAavB,EAACyB,EAIpB,CAWA,SAAgBlB,EAACQ,EAAcxB,GAC7B,GAAsB,MAAlBwB,EAAMW,SACR,OAGF,MAAQC,EAWV,SAA4BZ,GAC1B,OAAIA,EAAMa,IACD,aAAab,EAAMa,IAAI,kBAEVC,KAAKC,SAAKD,KAAKE,SAA4B,MAEnE,CAjBaC,CAAmBjB,GAE9BA,EAAMW,SAASO,OAAO,EAAG,EAiB3B,SAA6BlB,EAAcvB,EAAkBmC,GAC3D,QAAiB,MAAU,uBAAwB,GAAI,GAClDnC,GACH0C,EAASC,QAAQ,WAAY,QAE3BpB,EAAMa,KACRM,EAASC,QAAQ,OAAQpB,EAAMa,IAAI,GAAGQ,YAGxCF,EAASC,QAAQ,KAAMR,GAEvB,MAAyBU,EAAGjD,EAAckD,KAAKvB,EAAMT,SAMrD,MAL6D,OAAxB,MAAnB+B,OAAmB,EAAnBA,EAAsB,GAAGE,gBAEzCL,EAASC,QAAQ,UAAW,SAIhC,CAnC8BK,CAAoBzB,EAAOxB,EAAQC,QAASmC,IACxEZ,EAAMW,SAAS,GAAGpB,QAAUS,EAAMW,SAAS,GAAGpB,QAAQmC,QAAQrD,EAAe,IAEzEG,EAAQE,QACVsB,EAAMW,SAASO,OAAO,EAAG,EAiC7B,SAA+BN,GAC7B,MAAMe,EAAkB,IAAIC,EAAM,yBAA0B,GAAI,GAEhE,OADAD,EAAgBP,QAAQ,KAAMR,IAEhC,CArCgCiB,CAAsBjB,IAClDZ,EAAMW,SAASmB,KAuCNF,IAAAA,EAAM,0BAA2B,IAAK,IArCnD"}