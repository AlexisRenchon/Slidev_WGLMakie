{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 The HedgeDoc developers (see AUTHORS file)\n *\n * SPDX-License-Identifier: ISC\n */\n\n// Markdown-it plugin to render GitHub-style task lists; see\n//\n// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n// https://github.com/blog/1825-task-lists-in-all-markdown-documents\n\nimport MarkdownIt from 'markdown-it/lib'\nimport StateCore from 'markdown-it/lib/rules_core/state_core.js'\nimport Token from 'markdown-it/lib/token.js'\n\ninterface TaskListsOptions {\n  enabled: boolean\n  label: boolean\n  lineNumber: boolean\n}\n\nconst checkboxRegex = /^ *\\[([\\sx])] /i\n\nexport default function markdownItTaskLists(\n  md: MarkdownIt,\n  options: TaskListsOptions = { enabled: false, label: false, lineNumber: false }\n): void {\n  md.core.ruler.after('inline', 'task-lists', (state) => processToken(state, options))\n  md.renderer.rules.taskListItemCheckbox = (tokens) => {\n    const token = tokens[0]\n    const checkedAttribute = token.attrGet('checked') ? 'checked=\"\" ' : ''\n    const disabledAttribute = token.attrGet('disabled') ? 'disabled=\"\" ' : ''\n    const line = token.attrGet('line')\n    const idAttribute = `id=\"${token.attrGet('id')}\" `\n    const dataLineAttribute = line && options.lineNumber ? `data-line=\"${line}\" ` : ''\n\n    return `<input class=\"task-list-item-checkbox\" type=\"checkbox\" ${checkedAttribute}${disabledAttribute}${dataLineAttribute}${idAttribute}/>`\n  }\n\n  md.renderer.rules.taskListItemLabel_close = () => {\n    return '</label>'\n  }\n\n  md.renderer.rules.taskListItemLabel_open = (tokens: Token[]) => {\n    const token = tokens[0]\n    const id = token.attrGet('id')\n    return `<label for=\"${id}\">`\n  }\n}\n\nfunction processToken(state: StateCore, options: TaskListsOptions): boolean {\n  const allTokens = state.tokens\n  for (let i = 2; i < allTokens.length; i++) {\n    if (!isTodoItem(allTokens, i)) {\n      continue\n    }\n\n    todoify(allTokens[i], options)\n    allTokens[i - 2].attrJoin('class', `task-list-item ${options.enabled ? ' enabled' : ''}`)\n\n    const parentToken = findParentToken(allTokens, i - 2)\n    if (parentToken) {\n      parentToken.attrJoin('class', 'contains-task-list')\n    }\n  }\n  return false\n}\n\nfunction findParentToken(tokens: Token[], index: number): Token | undefined {\n  const targetLevel = tokens[index].level - 1\n  for (let currentTokenIndex = index - 1; currentTokenIndex >= 0; currentTokenIndex--) {\n    if (tokens[currentTokenIndex].level === targetLevel) {\n      return tokens[currentTokenIndex]\n    }\n  }\n  return undefined\n}\n\nfunction isTodoItem(tokens: Token[], index: number): boolean {\n  return (\n    isInline(tokens[index]) &&\n    isParagraph(tokens[index - 1]) &&\n    isListItem(tokens[index - 2]) &&\n    startsWithTodoMarkdown(tokens[index])\n  )\n}\n\nfunction todoify(token: Token, options: TaskListsOptions): void {\n  if (token.children == null) {\n    return\n  }\n\n  const id = generateIdForToken(token)\n\n  token.children.splice(0, 0, createCheckboxToken(token, options.enabled, id))\n  token.children[1].content = token.children[1].content.replace(checkboxRegex, '')\n\n  if (options.label) {\n    token.children.splice(1, 0, createLabelBeginToken(id))\n    token.children.push(createLabelEndToken())\n  }\n}\n\nfunction generateIdForToken(token: Token): string {\n  if (token.map) {\n    return `task-item-${token.map[0]}`\n  } else {\n    return `task-item-${Math.ceil(Math.random() * (10000 * 1000) - 1000)}`\n  }\n}\n\nfunction createCheckboxToken(token: Token, enabled: boolean, id: string): Token {\n  const checkbox = new Token('taskListItemCheckbox', '', 0)\n  if (!enabled) {\n    checkbox.attrSet('disabled', 'true')\n  }\n  if (token.map) {\n    checkbox.attrSet('line', token.map[0].toString())\n  }\n\n  checkbox.attrSet('id', id)\n\n  const checkboxRegexResult = checkboxRegex.exec(token.content)\n  const isChecked = checkboxRegexResult?.[1].toLowerCase() === 'x'\n  if (isChecked) {\n    checkbox.attrSet('checked', 'true')\n  }\n\n  return checkbox\n}\n\nfunction createLabelBeginToken(id: string): Token {\n  const labelBeginToken = new Token('taskListItemLabel_open', '', 1)\n  labelBeginToken.attrSet('id', id)\n  return labelBeginToken\n}\n\nfunction createLabelEndToken(): Token {\n  return new Token('taskListItemLabel_close', '', -1)\n}\n\nfunction isInline(token: Token): boolean {\n  return token.type === 'inline'\n}\n\nfunction isParagraph(token: Token): boolean {\n  return token.type === 'paragraph_open'\n}\n\nfunction isListItem(token: Token): boolean {\n  return token.type === 'list_item_open'\n}\n\nfunction startsWithTodoMarkdown(token: Token): boolean {\n  return checkboxRegex.test(token.content)\n}\n"],"names":["checkboxRegex","markdownItTaskLists","md","options","enabled","label","lineNumber","core","ruler","after","state","processToken","allTokens","tokens","i","length","index","type","test","content","todoify","attrJoin","parentToken","findParentToken","renderer","rules","taskListItemCheckbox","token","checkedAttribute","attrGet","line","disabledAttribute","idAttribute","taskListItemLabel_close","taskListItemLabel_open","targetLevel","level","currentTokenIndex","children","map","Math","ceil","random","generateIdForToken","splice","id","checkbox","Token","attrSet","toString","exec","checkboxRegexResult","toLowerCase","createCheckboxToken","replace","labelBeginToken","createLabelBeginToken","push"],"mappings":"wCAqBA,IAAmBA,EAAG,2BAEqBC,EACzCC,EACAC,YAAAA,IAAAA,EAA4B,CAAEC,SAAS,EAAOC,OAAO,EAAOC,YAAY,IAExEJ,EAAGK,KAAKC,MAAMC,MAAM,SAAU,aAAc,SAACC,GAAUC,OAuBzD,SAAsBD,EAAkBP,GAEtC,IADA,IAAMS,EAAYF,EAAMG,OACdC,EAAG,EAAGA,EAAIF,EAAUG,OAAQD,IACpC,GAyFoB,YAhEJD,EAzBAD,GAyBiBI,EAzBNF,GAyFhBG,MAIS,mBAjERJ,EAAOG,EAAQ,GAiEhBC,MAIS,mBApETJ,EAAOG,EAAQ,GAoEfC,MAIOjB,EAACkB,KAvEIL,EAAOG,GAuEAG,SArG9B,CAIAC,EAAQR,EAAUE,GAAIX,GACtBS,EAAUE,EAAI,GAAGO,SAAS,QAAO,mBAAoBlB,EAAQC,QAAU,WAAa,KAEpF,IAAiBkB,EAAGC,EAAgBX,EAAWE,EAAI,GAC/CQ,GACFA,EAAYD,SAAS,QAAS,qBAP/B,CAkGL,IA3EoBR,EAAiBG,EAbnC,QACF,CAvCyDL,CAAaD,EAAOP,EAAQ,GACnFD,EAAGsB,SAASC,MAAMC,qBAAuB,SAACb,GACxC,IAAMc,EAAQd,EAAO,GACCe,EAAGD,EAAME,QAAQ,WAAa,cAAgB,KAC1CF,EAAME,QAAQ,YAAc,eAAiB,GACjEC,EAAOH,EAAME,QAAQ,UACAF,OAAAA,EAAME,QAAQ,MAAK,KAG9C,MAAA,0DAAiED,EAAmBG,GAF1DD,GAAQ3B,EAAQG,yBAA2BwB,EAAI,KAAO,IAE4CE,EAC9H,IAAA,EAEA9B,EAAGsB,SAASC,MAAMQ,wBAA0B,WAC1C,MAAO,UACT,EAEA/B,EAAGsB,SAASC,MAAMS,uBAAyB,SAACrB,GAG1C,qBAFcA,EAAO,GACJgB,QAAQ,MACD,IAC1B,CACF,CAoBA,WAAyBhB,EAAiBG,GAExC,IADA,IAAMmB,EAActB,EAAOG,GAAOoB,MAAQ,IACbpB,EAAQ,EAAGqB,GAAqB,EAAGA,IAC9D,GAAIxB,EAAOwB,GAAmBD,QAAUD,EACtC,OAAOtB,EAAOwB,EAIpB,CAWA,WAAiBV,EAAcxB,GAC7B,GAAsB,MAAlBwB,EAAMW,SAAV,CAIA,MAWF,SAA4BX,GAC1B,OAAIA,EAAMY,iBACYZ,EAAMY,IAAI,GAEVC,aAAAA,KAAKC,KAAsB,IAAjBD,KAAKE,SAA4B,IAEnE,CAjBaC,CAAmBhB,GAE9BA,EAAMW,SAASM,OAAO,EAAG,EAiB3B,SAA6BjB,EAAcvB,EAAkByC,GAC3D,IAAcC,EAAG,IAASC,EAAC,uBAAwB,GAAI,GAClD3C,GACH0C,EAASE,QAAQ,WAAY,QAE3BrB,EAAMY,KACRO,EAASE,QAAQ,OAAQrB,EAAMY,IAAI,GAAGU,YAGxCH,EAASE,QAAQ,KAAMH,GAEvB,MAA4B7C,EAAckD,KAAKvB,EAAMR,SAMrD,MAL6D,OAA3CgC,MAAAA,OAAAA,EAAAA,EAAsB,GAAGC,gBAEzCN,EAASE,QAAQ,UAAW,QAGvBF,CACT,CAnC8BO,CAAoB1B,EAAOxB,EAAQC,QAASyC,IACxElB,EAAMW,SAAS,GAAGnB,QAAUQ,EAAMW,SAAS,GAAGnB,QAAQmC,QAAQtD,EAAe,IAEzEG,EAAQE,QACVsB,EAAMW,SAASM,OAAO,EAAG,EAiC7B,SAA+BC,GAC7B,IAAMU,EAAkB,IAAIR,EAAM,yBAA0B,GAAI,GAEhE,OADAQ,EAAgBP,QAAQ,KAAMH,IAEhC,CArCgCW,CAAsBX,IAClDlB,EAAMW,SAASmB,KAuCNV,IAAAA,EAAM,0BAA2B,IAAK,IAhDhD,CAWH"}